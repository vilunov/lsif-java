/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

subprojects {
    plugins.withId("java", {
        sourceSets {
            main.java.srcDirs = ["src/banana"]
        }
    })
}

allprojects {
	group "com.sourcegraph.lsifjava"

    apply plugin: 'maven-publish'
    
    afterEvaluate { project ->
        if (!new File(project.projectDir.toString()+"/build.gradle").exists()) return
        publishing {
            model {
                tasks.generatePomFileForSourcegraphPublication {
                    destination = file("$projectDir/pom.xml")
                }
            }
            publications {
                sourcegraph(MavenPublication) {
                    def projectDirStr = project.projectDir
                    def subprojectSet = project.subprojects
                    def sourceSetsSet = ["${projectDirStr}/src/main/java"]
                    if (project.hasProperty("sourceSets") &&
                        project.sourceSets.hasProperty("main") &&
                        project.sourceSets.main.hasProperty("java") &&
                        project.sourceSets.main.java.hasProperty("srcDirs")) {
                        sourceSetsSet = project.sourceSets.main.java.srcDirs
                    }

                    if (!(new File(projectDirStr.toString()+"/build.gradle").exists())) return

                    def javaApplied = components.collect{it.getName()}.contains("java")
                    if (javaApplied) {
                        from components.java
                    }

                    pom.withXml {
                        def node = asNode();
                        if (node.get("build").size() == 0 && javaApplied) {
                            node.appendNode('build').with {
                                if (sourceSetsSet.size() > 0) {
                                    appendNode('sourceDirectory', sourceSetsSet.first())
                                } else {
                                    def dirpath = "${projectDirStr}/src/main/java"
                                    if (new File(dirpath).exists()) appendNode('sourceDirectory', dirpath)
                                }
                            }
                        }

                        if (subprojectSet.size() > 0) {
                            node.appendNode("modules").with {
                                for(Project p : subprojectSet) {
                                    if(new File(p.path.replace(":", "/./").substring(1)+"/build.gradle").exists()) {
                                        appendNode("module", p.path.replace(":", "/").substring(1))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}